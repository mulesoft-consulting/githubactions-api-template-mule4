# This is a basic workflow to help you get started with Actions

name: Mule Pipeline

# Controls when the action will run. 
on:
  # Triggers the workflow on push
  push:
    branches: [ dev ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # environment variables accessible in all steps
    env:
      NEXUS_EE_USERNAME: ${{ secrets.NEXUS_EE_USERNAME }}
      NEXUS_EE_PWD: ${{ secrets.NEXUS_EE_PWD }}
      ANYPOINT_APP_CLIENT_ID: ${{ secrets.ANYPOINT_APP_CLIENT_ID }}
      ANYPOINT_APP_CLIENT_SECRET: ${{ secrets.ANYPOINT_APP_CLIENT_SECRET }}
      ANYPOINT_HOST: "https://{{ANYPOINT_HOST}}"
      ANYPOINT_ANALYTICS_HOST: "https://analytics-ingest.{{ANYPOINT_HOST}}"
      ANYPOINT_BUSINESS_GROUP: "{{GROUP_NAME}}"
      ANYPOINT_WORKERS: "1"
      ANYPOINT_WORKER_TYPE: "MICRO"
      ANYPOINT_REGION: "{{REGION}}"
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set Up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      - id: branch_name
        name: Extract Branch Name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - id: branch_name_uppercase
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ steps.branch_name.outputs.branch }}

      # DEV branch specific configuration
      - if: github.ref == 'refs/heads/dev'
        name: Environment DEV configuration
        run: |
          echo 'export ENV="DEV"' > ~/.bashrc
          echo 'export ANYPOINT_ENV="Development"' > ~/.bashrc
      
      # QA branch specific configuration 
      - if: github.ref == 'refs/heads/qa'
        name: Environment QA configuration
        run: |
          echo 'export ENV="QA"' > ~/.bashrc
          echo 'export ANYPOINT_ENV="Quality"' > ~/.bashrc
        
      - name: Get Anypoint Access Token
        run: |
          export TOKEN=`curl -s "$ANYPOINT_HOST/accounts/api/v2/oauth2/token" -X POST -H 'Content-Type: application/json' -d "{\"grant_type\": \"client_credentials\", \"client_id\": \"$ANYPOINT_APP_CLIENT_ID\", \"client_secret\": \"$ANYPOINT_APP_CLIENT_SECRET\"}"|sed -n 's|.*"access_token":"\([^\"]*\)".*|\1|p'|xargs`
          echo "export ACCESS_TOKEN=$TOKEN" > ~/.bashrc
          echo $TOKEN

      - name: Preparing Maven Settings
        uses: s4u/maven-settings-action@v2.3.0
        with:
          servers: |
            [
              {"id": "anypoint-exchange-v2", "username": "~~~Token~~~", "password": "${env.ACCESS_TOKEN}"},
              {"id": "mule-ee-nexus-releases", "username": "$NEXUS_EE_USERNAME", "password": "$NEXUS_EE_PWD"}
            ]
      
      - name: Verify Maven
        run: |
          source ~/.bashrc
          mvn verify

      - name: Run Deploy
        if: ${{ success() }} 
        # Step specific environment variables
        # These variables represent the secret names generated from branch name
        env:
          MULE_VAULT_KEY_SECRETNAME: '${{ steps.branch_name_uppercase.outputs.uppercase }}__MULE_VAULT_KEY'
          ANYPOINT_ENV_CLIENT_ID_SECRETNAME: '${{ steps.branch_name_uppercase.outputs.uppercase }}__ANYPOINT_ENV_CLIENT_ID'
          ANYPOINT_ENV_CLIENT_SECRET_SECRETNAME: '${{ steps.branch_name_uppercase.outputs.uppercase }}__ANYPOINT_ENV_CLIENT_SECRET'
        run: |
          source ~/.bashrc
          mvn deploy -DmuleDeploy \
            -Dmule.env=$ENV \
            -Dmule.secure.key=${{secrets[env.MULE_VAULT_KEY_SECRETNAME]}} \
            -Danypoint.base_uri=$ANYPOINT_HOST \
            -Danypoint.analytics_base_uri=$ANYPOINT_ANALYTICS_HOST \
            -Danypoint.environment=$ANYPOINT_ENV \
            -Danypoint.businessgroup=$ANYPOINT_BUSINESS_GROUP \
            -Danypoint.workers=$ANYPOINT_WORKERS \
            -Danypoint.workertype=$ANYPOINT_WORKER_TYPE \
            -Danypoint.region=$ANYPOINT_REGION \
            -DauthToken=$ACCESS_TOKEN \
            -Dplatform.client_id=${{secrets[env.ANYPOINT_ENV_CLIENT_ID_SECRETNAME]}} \
            -Dplatform.client_secret=${{secrets[env.ANYPOINT_ENV_CLIENT_SECRET_SECRETNAME]}}

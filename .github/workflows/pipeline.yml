# This is a basic workflow to help you get started with Actions

name: Mule Pipeline

# Controls when the action will run. 
on:
  # Triggers the workflow on push
  push:
    branches: [ dev, qa ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: "the version to deploy on production"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # environment variables accessible in all steps
    env:
      NEXUS_EE_USERNAME: ${{ secrets.NEXUS_EE_USERNAME }}
      NEXUS_EE_PWD: ${{ secrets.NEXUS_EE_PWD }}
      ANYPOINT_APP_CLIENT_ID: ${{ secrets.ANYPOINT_APP_CLIENT_ID }}
      ANYPOINT_APP_CLIENT_SECRET: ${{ secrets.ANYPOINT_APP_CLIENT_SECRET }}
      ANYPOINT_HOST: "https://{{ANYPOINT_HOST}}"
      ANYPOINT_ANALYTICS_HOST: "https://analytics-ingest.{{ANYPOINT_HOST}}"
      ANYPOINT_BUSINESS_GROUP: "{{GROUP_NAME}}"
      ANYPOINT_WORKERS: "1"
      ANYPOINT_WORKER_TYPE: "MICRO"
      ANYPOINT_REGION: "{{REGION}}"
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Clone Repository (Latest)
        uses: actions/checkout@v2
        if: github.event.inputs.version == ''

      - name: Clone Repository - Version ${{ github.event.inputs.version }}
        uses: actions/checkout@v2
        if: github.event.inputs.version != ''
        with:
          ref: ${{ github.event.inputs.version }}
      
      - name: Set Up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Extract Branch Name
        if: github.event.inputs.version == ''
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: User production Branch naming
        if: github.event.inputs.version != ''
        run: echo "BRANCH_NAME=$(echo prod)" >> $GITHUB_ENV

      - id: env_uppercase
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ env.BRANCH_NAME }}

      - name: Initialize bashrc file 
        run: |
          > ~/.bashrc

      # DEV branch specific configuration
      - if: env.BRANCH_NAME == 'dev'
        name: Environment DEV configuration
        run: |
          echo 'export ENV="DEV"' > ~/.bashrc
          echo 'export ANYPOINT_ENV="Development"' >> ~/.bashrc
          echo 'export MAVEN_PROFILES="build_non_prod"' >> ~/.bashrc
      
      # QA branch specific configuration 
      - if: env.BRANCH_NAME == 'qa'
        name: Environment QA configuration
        run: |
          echo 'export ENV="QA"' > ~/.bashrc
          echo 'export ANYPOINT_ENV="Quality"' >> ~/.bashrc
          echo 'export MAVEN_PROFILES="build_non_prod"' >> ~/.bashrc
        
      # PROD specific configuration (can only be executed with a tag)
      - if: env.BRANCH_NAME == 'prod'
        name: Environment PROD configuration
        run: |
          echo 'export ENV="PROD"' >> ~/.bashrc
          echo 'export ANYPOINT_ENV="Production"' >> ~/.bashrc
          echo 'export MAVEN_PROFILES="build_prod"' >> ~/.bashrc

      - name: Get Anypoint Access Token
        run: |
          export TOKEN=`curl -s "$ANYPOINT_HOST/accounts/api/v2/oauth2/token" -X POST -H 'Content-Type: application/json' -d "{\"grant_type\": \"client_credentials\", \"client_id\": \"$ANYPOINT_APP_CLIENT_ID\", \"client_secret\": \"$ANYPOINT_APP_CLIENT_SECRET\"}"|sed -n 's|.*"access_token":"\([^\"]*\)".*|\1|p'|xargs`
          echo "export ACCESS_TOKEN=$TOKEN" >> ~/.bashrc

      - name: Preparing Maven Settings
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          servers: | 
            [
              { "id": "anypoint-exchange-v2", "username": "~~~Token~~~", "password": "${env.ACCESS_TOKEN}"},
              { "id": "mule-ee-nexus-releases", "username": "${env.NEXUS_EE_USERNAME}", "password": "${env.NEXUS_EE_PWD}"}
            ]

      - name: Generating Certificates
        env:
          MULE_VAULT_KEY_SECRETNAME: '${{ steps.env_uppercase.outputs.uppercase }}__MULE_VAULT_KEY'
        run: |
          PROJECT_NAME="template-api"
          PASS="${{secrets[env.MULE_VAULT_KEY_SECRETNAME]}}"
          APP="$PROJECT_NAME-cert"
          HOST="localhost"
          ALTNAMES="DNS:$HOST,IP:127.0.0.1"
          KEYSTORE_FOLDER="./src/main/resources/certificates"
          KEYSTORE="$KEYSTORE_FOLDER/$APP.p12"
          DNAME="cn=$HOST, ou=Proxy, o=MuleSoft, c=EU"
          ALIAS="server"
          VALIDITY="3000"
          mkdir -p $KEYSTORE_FOLDER
          rm -f $KEYSTORE
          keytool -v -genkeypair \
            -keyalg RSA \
            -dname "$DNAME" \
            -ext SAN="$ALTNAMES" \
            -validity $VALIDITY \
            -alias "$ALIAS" \
            -keystore "$KEYSTORE" \
            -storetype pkcs12 \
            -storepass "$PASS"
      
      - name: Validate Project
        run: |
          source ~/.bashrc
          if [ -z "$MAVEN_PROFILES" ];
            then echo "No Configuration Found." && exit 1;
          else mvn -B -P $MAVEN_PROFILES compile;
          fi;

      - name: Run Deploy
        if: ${{ success() }} 
        # Step specific environment variables
        # These variables represent the secret names generated from branch name
        env:
          MULE_VAULT_KEY_SECRETNAME: '${{ steps.env_uppercase.outputs.uppercase }}__MULE_VAULT_KEY'
          ANYPOINT_ENV_CLIENT_ID_SECRETNAME: '${{ steps.env_uppercase.outputs.uppercase }}__ANYPOINT_ENV_CLIENT_ID'
          ANYPOINT_ENV_CLIENT_SECRET_SECRETNAME: '${{ steps.env_uppercase.outputs.uppercase }}__ANYPOINT_ENV_CLIENT_SECRET'
        run: |
          source ~/.bashrc
          mvn -B -P $MAVEN_PROFILES deploy \
            -DmuleDeploy \
            -Dmule.env="$ENV" \
            -Dmule.secure.key="${{secrets[env.MULE_VAULT_KEY_SECRETNAME]}}" \
            -Danypoint.base_uri="$ANYPOINT_HOST" \
            -Danypoint.analytics_base_uri="$ANYPOINT_ANALYTICS_HOST" \
            -Danypoint.environment="$ANYPOINT_ENV" \
            -Danypoint.businessgroup="$ANYPOINT_BUSINESS_GROUP" \
            -Danypoint.workers="$ANYPOINT_WORKERS" \
            -Danypoint.workertype="$ANYPOINT_WORKER_TYPE" \
            -Danypoint.region="$ANYPOINT_REGION" \
            -DauthToken="$ACCESS_TOKEN" \
            -Dplatform.client_id="${{secrets[env.ANYPOINT_ENV_CLIENT_ID_SECRETNAME]}}" \
            -Dplatform.client_secret="${{secrets[env.ANYPOINT_ENV_CLIENT_SECRET_SECRETNAME]}}"
